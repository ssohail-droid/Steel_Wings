package org.firstinspires.ftc.teamcode.MechamTest;

import static java.lang.Thread.sleep;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;

import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp(name="Hanger", group="Iterative OpMode")
public class Hang extends OpMode {

    // Declare OpMode members
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor frontLeft = null;
    private DcMotor backLeft = null;
    private DcMotor frontRight = null;
    private DcMotor backRight = null;

    // Declare new motors and servos
    private DcMotor linearMotor;
    private DcMotor linearMotor2;
    private DcMotor backArm = null;


    // Boolean flags to keep track of toggle state
    boolean isClockwise = false;
    boolean isCounterClockwise = false;
    boolean isSlowMode = false; // New flag for slow mode

    // Servo state variables

    @Override
    public void init() {
        // Initialize drive motors

        // Initialize linear motor and set encoder behavior
        linearMotor = hardwareMap.get(DcMotor.class, "1arm");
        linearMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        linearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        linearMotor2 = hardwareMap.get(DcMotor.class, "2arm");
        linearMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        linearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);



        // Tell the driver that initialization is complete.
        telemetry.addData("Status", "Initialized");
    }

    @Override
    public void start() {
        runtime.reset();
    }

    @Override
    public void loop() {


        // Control linear motor using D-pad
        if (gamepad2.dpad_up) {
            linearMotor.setTargetPosition(linearMotor.getCurrentPosition() + 100);
            linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor.setPower(1.0);
        } else if (gamepad2.dpad_down) {
            linearMotor.setTargetPosition(linearMotor.getCurrentPosition() - 100);
            linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor.setPower(1.0);
        }
        if (gamepad2.dpad_up) {
            linearMotor2.setTargetPosition(linearMotor2.getCurrentPosition() + 100);
            linearMotor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor2.setPower(1.0);
        } else if (gamepad2.dpad_down) {
            linearMotor2.setTargetPosition(linearMotor2.getCurrentPosition() - 100);
            linearMotor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor2.setPower(1.0);
        }


        // Telemetry data for motors and servos
        telemetry.addData("Linear Motor Position", linearMotor.getCurrentPosition());



        // Update telemetry
        telemetry.update();
    }

    private void debounceDelay() {
        try {
            sleep(300); // Debounce delay
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
