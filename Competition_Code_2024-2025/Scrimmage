package org.firstinspires.ftc.teamcode.MechamTest;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp(name="FTC Compet test ", group="Iterative OpMode")
public class BasicMecham extends OpMode {

    // Declare OpMode members
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor frontLeft = null;
    private DcMotor backLeft = null;
    private DcMotor frontRight = null;
    private DcMotor backRight = null;

    // Declare new motor and servo
    private DcMotor linearMotor = null;
    private Servo gripperServo = null;

    // Servo state variables
    private boolean isServoOpen = false;
    private boolean lastXButtonState = false;

    @Override
    public void init() {

        // Initialize drive motors
        frontLeft  = hardwareMap.get(DcMotor.class, "front_Left"); // changes
        backLeft  = hardwareMap.get(DcMotor.class, "back_Left"); // changes
        frontRight = hardwareMap.get(DcMotor.class, "front_Right"); // changes
        backRight = hardwareMap.get(DcMotor.class, "back_Right"); // changes

        // Reverse right motors
        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);
        backRight.setDirection(DcMotorSimple.Direction.REVERSE);

        // Initialize linear motor and set encoder behavior
        linearMotor = hardwareMap.get(DcMotor.class, "linear_Motor"); // changes
        linearMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        linearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Initialize
        gripperServo = hardwareMap.get(Servo.class, "gripper_Servo"); // changes

        // Tell the driver that initialization is complete.
        telemetry.addData("Status", "Initialized");
    }

    @Override
    public void start() {
        runtime.reset();
    }

    @Override
    public void loop() {
        // Setup mecanum wheel drive variables
        double y = -gamepad1.left_stick_y;
        double x =  gamepad1.left_stick_x;
        double turn  =  gamepad1.right_stick_x;
        double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(turn), 1);

        // Calculate power for each wheel
        double frontLeftPower = (y + x + turn) / denominator;
        double backLeftPower  = (y - x + turn) / denominator;
        double frontRightPower = (y - x - turn) / denominator;
        double backRightPower  = (y + x - turn) / denominator;

        // Set power to wheels
        frontLeft.setPower(frontLeftPower);
        backLeft.setPower(backLeftPower);
        frontRight.setPower(frontRightPower);
        backRight.setPower(backRightPower);

        // Motor encoder control using D-pad
        if (gamepad1.dpad_up) {
            linearMotor.setTargetPosition(linearMotor.getCurrentPosition() + 100); // changes
            linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor.setPower(0.5); // Adjust speed if necessary
        } else if (gamepad1.dpad_down) {
            linearMotor.setTargetPosition(linearMotor.getCurrentPosition() - 100); // changes
            linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor.setPower(0.5);
        }

        // Toggle servo open/close with X button
        if (gamepad1.x && !lastXButtonState) {  // Detect edge of button press
            isServoOpen = !isServoOpen;
            if (isServoOpen) {
                gripperServo.setPosition(0.55); // Open position changes
            } else {
                gripperServo.setPosition(0.0);  // Closed position changes
            }
        }
        lastXButtonState = gamepad1.x;  // Update last X button state

        // Telemetry data for driver
        telemetry.addData("Status", "Run Time: " + runtime.toString());
        telemetry.addData("Left", "front (%.2f), back (%.2f)", frontLeftPower, backLeftPower);
        telemetry.addData("Right", "front (%.2f), back (%.2f)", frontRightPower, backRightPower);
        telemetry.addData("Linear Motor Position", linearMotor.getCurrentPosition());
        telemetry.addData("Servo Position", gripperServo.getPosition());
    }

}
